/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var SimpleFlipClock = function () {
	  function SimpleFlipClock(_ref) {
	    var element = _ref.element;
	    var currentNumber = _ref.currentNumber;
	    var _ref$maxNumber = _ref.maxNumber;
	    var maxNumber = _ref$maxNumber === undefined ? 9 : _ref$maxNumber;
	    var _ref$minNumber = _ref.minNumber;
	    var minNumber = _ref$minNumber === undefined ? 0 : _ref$minNumber;
	
	    _classCallCheck(this, SimpleFlipClock);
	
	    this.element = element;
	    this.currentNumber = currentNumber;
	    this.maxNumber = maxNumber;
	    this.minNumber = minNumber;
	
	    this.upPartDom = element.querySelector('.sfc-number__up');
	    this.downPartDom = element.querySelector('.sfc-number__down');
	  }
	
	  _createClass(SimpleFlipClock, [{
	    key: 'update',
	    value: function update(number) {
	      var numberElementHtml = this.getNumberElementHtml(number);
	
	      this.upPartDom.insertAdjacentHTML('beforeend', numberElementHtml);
	      this.downPartDom.insertAdjacentHTML('beforeend', numberElementHtml);
	
	      if (this.upPartDom.children.length === 3) {
	        this.upPartDom.removeChild(this.upPartDom.children[0]);
	        this.downPartDom.removeChild(this.downPartDom.children[0]);
	      }
	
	      this.element.getBoundingClientRect();
	
	      this.upPartDom.children[0].classList.remove('sfc-number__element--active');
	      this.downPartDom.children[0].classList.remove('sfc-number__element--active');
	      this.upPartDom.children[0].classList.add('sfc-number__element--before');
	      this.downPartDom.children[0].classList.add('sfc-number__element--before');
	
	      this.upPartDom.children[1].classList.add('sfc-number__element--active');
	      this.downPartDom.children[1].classList.add('sfc-number__element--active');
	
	      this.currentNumber = number;
	    }
	  }, {
	    key: 'increment',
	    value: function increment() {
	      var number = this.currentNumber + 1;
	
	      if (number > this.maxNumber) {
	        number = this.minNumber;
	      }
	      this.update(number);
	    }
	  }, {
	    key: 'decrement',
	    value: function decrement() {
	      var number = this.currentNumber - 1;
	
	      if (number < this.minNumber) {
	        number = this.maxNumber;
	      }
	      this.update(number);
	    }
	  }, {
	    key: 'getNumberElementHtml',
	    value: function getNumberElementHtml(number) {
	      return '\n        <li class="sfc-number__element">\n          <div class="sfc-number__digit">\n            <div class="sfc-number__digit-full">' + number + '</div>\n          </div>\n        </li>\n      ';
	    }
	  }]);
	
	  return SimpleFlipClock;
	}();
	
	window.SimpleFlipClock = SimpleFlipClock;

/***/ }
/******/ ]);
//# sourceMappingURL=main.min.js.map