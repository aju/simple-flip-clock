/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _easeInOutQuad = __webpack_require__(1);
	
	var _easeInOutQuad2 = _interopRequireDefault(_easeInOutQuad);
	
	var _easeSin = __webpack_require__(2);
	
	var _easeSin2 = _interopRequireDefault(_easeSin);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var DashedProgressBar = function () {
	  function DashedProgressBar(_ref) {
	    var canvas = _ref.canvas;
	    var _ref$radius = _ref.radius;
	    var radius = _ref$radius === undefined ? 75 : _ref$radius;
	    var _ref$tiles = _ref.tiles;
	    var tiles = _ref$tiles === undefined ? 30 : _ref$tiles;
	    var _ref$gapSize = _ref.gapSize;
	    var gapSize = _ref$gapSize === undefined ? 0.25 : _ref$gapSize;
	    var _ref$animatedTiles = _ref.animatedTiles;
	    var animatedTiles = _ref$animatedTiles === undefined ? 10 : _ref$animatedTiles;
	    var _ref$startWidth = _ref.startWidth;
	    var startWidth = _ref$startWidth === undefined ? 2 : _ref$startWidth;
	    var _ref$endWidth = _ref.endWidth;
	    var endWidth = _ref$endWidth === undefined ? 12 : _ref$endWidth;
	    var _ref$animationStep = _ref.animationStep;
	    var animationStep = _ref$animationStep === undefined ? 0.015 : _ref$animationStep;
	    var _ref$backgroundColor = _ref.backgroundColor;
	    var backgroundColor = _ref$backgroundColor === undefined ? '#fff' : _ref$backgroundColor;
	    var _ref$inactiveTileColo = _ref.inactiveTileColor;
	    var inactiveTileColor = _ref$inactiveTileColo === undefined ? '#dde1e4' : _ref$inactiveTileColo;
	
	    _classCallCheck(this, DashedProgressBar);
	
	    //support for HiDPIs
	    var dpi = window.devicePixelRatio || 1;
	
	    // basic params
	    this.radius = radius * dpi;
	    this.tiles = tiles;
	    this.gapSize = gapSize; //0-1
	    this.backgroundColor = backgroundColor;
	    this.inactiveTileColor = inactiveTileColor;
	
	    // animation params
	    this.animatedTiles = animatedTiles;
	    this.startWidth = startWidth * dpi;
	    this.endWidth = endWidth * dpi;
	    this.animationStep = animationStep;
	
	    //canvas setup
	    this.margin = Math.max(this.startWidth / 2, this.endWidth / 2);
	    this.canvas = canvas;
	    var canvasSize = this.radius * 2 + this.margin * 2;
	
	    this.canvas.width = this.canvas.height = canvasSize;
	    this.canvas.style.width = this.canvas.style.height = canvasSize / dpi + 'px';
	    this.ctx = this.canvas.getContext('2d');
	
	    //tiles
	    this.tileColors = [];
	  }
	
	  _createClass(DashedProgressBar, [{
	    key: 'clearTiles',
	    value: function clearTiles() {
	      this.tileColors = [];
	    }
	  }, {
	    key: 'addTiles',
	    value: function addTiles(amount, color) {
	      for (var i = 0; i < amount; i++) {
	        this.tileColors.push(color);
	      }
	    }
	  }, {
	    key: '_drawTile',
	    value: function _drawTile(idx, color, width) {
	      var offsetArc = -Math.PI / 2; // first tile should be at 12 o'clock, not 3 o'clock
	      var gapArc = 2 * Math.PI / this.tiles * this.gapSize;
	      var barArc = 2 * Math.PI / this.tiles - gapArc;
	
	      var start = offsetArc + idx * (barArc + gapArc);
	      var end = start + barArc;
	
	      this.ctx.strokeStyle = color;
	      this.ctx.lineWidth = width;
	
	      this.ctx.beginPath();
	      this.ctx.arc(this.radius + this.margin, this.radius + this.margin, this.radius, start, end, 0);
	      this.ctx.stroke();
	    }
	  }, {
	    key: 'animate',
	    value: function animate(callback) {
	      var _this = this;
	
	      //draw background
	      var rMax = this.radius + this.margin;
	
	      this.ctx.beginPath();
	      this.ctx.arc(rMax, rMax, rMax + 1, 0, 2 * Math.PI, false);
	      this.ctx.fillStyle = this.backgroundColor;
	      this.ctx.fill();
	
	      var time = 0; // 0 -> 1
	
	      //draw inactive tiles
	      for (var i = 0; i < this.tiles; i++) {
	        this._drawTile(i, this.inactiveTileColor, this.endWidth - 1);
	      }
	
	      //animate active tiles
	      var draw = function draw() {
	        var currentIdx = Math.floor((0, _easeInOutQuad2.default)(time) * (_this.tileColors.length + _this.animatedTiles));
	
	        for (var idx = currentIdx - _this.animatedTiles; idx < currentIdx; idx++) {
	          if (!_this.tileColors[idx]) {
	            continue;
	          }
	
	          _this._drawTile(idx, _this.backgroundColor, Math.max(_this.startWidth, _this.endWidth) + 1);
	
	          var barTime = (0, _easeSin2.default)((currentIdx - idx) / _this.animatedTiles);
	          var width = _this.startWidth + barTime * (_this.endWidth - _this.startWidth);
	
	          _this._drawTile(idx, _this.tileColors[idx], width);
	        }
	
	        if (time > 1) {
	          if (typeof callback === 'function') {
	            callback();
	          }
	          return;
	        }
	
	        time += _this.animationStep;
	
	        requestAnimationFrame(draw);
	      };
	
	      requestAnimationFrame(draw);
	    }
	  }]);
	
	  return DashedProgressBar;
	}();
	
	window.DashedProgressBar = DashedProgressBar;

/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function (t) {
	  return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
	};

/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function (t) {
	  return Math.sin(t * Math.PI / 2);
	};

/***/ }
/******/ ]);
//# sourceMappingURL=main.min.js.map